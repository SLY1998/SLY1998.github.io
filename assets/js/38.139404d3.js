(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{554:function(t,e,r){"use strict";r.r(e);var s=r(1),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"react18-带来了什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react18-带来了什么"}},[t._v("#")]),t._v(" React18 带来了什么")]),t._v(" "),e("ol",[e("li",[t._v("改进已有属性，如"),e("strong",[t._v("自动批量处理、让 ssr 支持 Suspense 与 Lazy、修补 Suspense 等")])])]),t._v(" "),e("blockquote",[e("p",[t._v("自动批量处理：setState 是异步还是同步？在 18 之前，如果是在合成事件处理函数中，是异步的（批量处理），如果是在 setTimeout、原生事件中，是同步的（即与事件绑定）。在 18 之后，无论在什么情况下，都是异步的（没有与事件绑定了）。")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[t._v("支持 Concurrent 模式（并发渲染）")]),t._v("，带来新的 API，如 startTransition、useTransition 等")])]),t._v(" "),e("h2",{attrs:{id:"concurrent-模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrent-模式"}},[t._v("#")]),t._v(" Concurrent 模式")]),t._v(" "),e("blockquote",[e("p",[t._v("并发模式（Concurrent Mode）是 React 18 的新特性，它允许 React 在渲染过程中暂停、中断、恢复（可以同时更新多个状态），以实现更流畅的用户体验。并发模式通过以下机制实现：")])]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("时间切片（Time Slicing）")]),t._v("：React 将渲染任务分成多个小任务，每个小任务在浏览器空闲时间执行，以避免阻塞主线程。")]),t._v(" "),e("li",[e("strong",[t._v("优先级（Priority）")]),t._v("：React 根据任务的优先级决定任务的执行顺序，高优先级任务优先执行，低优先级任务延迟执行。")]),t._v(" "),e("li",[e("strong",[t._v("中断（Interruptible）")]),t._v("：React 允许任务在执行过程中被中断，以释放主线程资源，以便其他任务可以执行。")])]),t._v(" "),e("ul",[e("li",[t._v("useDeferredValue：用于延迟渲染，将渲染推迟到浏览器空闲时间")]),t._v(" "),e("li",[t._v("useTransition：用于在渲染期间显示加载状态，将渲染推迟到浏览器空闲时间")])])])}),[],!1,null,null,null);e.default=n.exports}}]);