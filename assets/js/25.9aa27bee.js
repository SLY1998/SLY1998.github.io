(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{539:function(s,a,t){"use strict";t.r(a);var e=t(1),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"sourcemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap"}},[s._v("#")]),s._v(" SourceMap")]),s._v(" "),a("p",[s._v("**「映射」**转换后的代码与源代码之间的关系")]),s._v(" "),a("p",[s._v("一段转换后的代码，通过转换过程中生成的 Source Map 文件就可以 "),a("strong",[s._v("「逆向解析」")]),s._v(" 得到对应的源代码。")]),s._v(" "),a("p",[s._v("Source Map 是一个 JSON 格式的文件，这个 JSON 里面记录的就是「转换后和转换前」代码之间的映射关系。")]),s._v(" "),a("h3",{attrs:{id:"基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本原理"}},[s._v("#")]),s._v(" 基本原理")]),s._v(" "),a("p",[s._v('在编译器(Babel/SWC)编译处理的过程中，在生成产物代码的同时,也生成产物代码中被转换的部分与源代码中相应部分的「映射关系表」。有了完整的映射表，就可以通过 Chrome 控制台中的"Enable Javascript source map"来实现调试时的显示与定位源代码功能。')]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[s._v("    version "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    file"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"out.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    sourceRoot "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    sources"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bar.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    names"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"src"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"maps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"are"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fun"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    mappings"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AAgBC,SAAQ,CAAEA"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("mappings:生成产物代码中每一段代码对应源代码中的哪一行、哪一列、哪一个变量名。")]),s._v(" "),a("p",[s._v("分三层")]),s._v(" "),a("ol",[a("li",[s._v("第一层是「行对应」，以分号（;）表示,「每个分号对应转换后源码的一行」")]),s._v(" "),a("li",[s._v("第二层是「位置对应」，以逗号（,）表示,「每个逗号对应转换后源码的一个位置」")]),s._v(" "),a("li",[s._v("第三层是「位置转换」，以 VLQ 编码表示,「代表该位置对应的转换前的源码位置」")])]),s._v(" "),a("blockquote",[a("p",[s._v("一般我们会在「转换后的代码中」通过「添加一行注释」的方式来去「引入 Source Map 文件」，这个注释的格式如下：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//# sourceMappingURL=/path/to/xxx.js.map")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("对于同一个源文件，根据不同的目标，可以生成不同效果的 Source Map。在开发环境和生产环境下，对于 source map 功能的期望也有所不同。")]),s._v(" "),a("ul",[a("li",[s._v("在开发环境中，要求"),a("em",[s._v("构建速度快/质量高/便于提升开发效率")]),s._v(",而不关注生成文件的大小和访问方式")]),s._v(" "),a("li",[s._v("在生产环境中，需要考虑"),a("em",[s._v("是否需要提供线上 Source Map/生成的文件大小/访问方式是否会对页面性能造成影响")]),s._v(",最后才考虑质量和构建速度")])]),s._v(" "),a("h3",{attrs:{id:"source-map-处理插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#source-map-处理插件"}},[s._v("#")]),s._v(" Source Map 处理插件")]),s._v(" "),a("p",[s._v("根据不同规则，实际上 Webpack 是从三种「插件」中选择其一作为 source map 的处理插件。")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("「EvalDevToolModulePlugin」")])]),s._v(" "),a("li",[a("strong",[s._v("「EvalSourceMapDevToolPlugin」")])]),s._v(" "),a("li",[a("strong",[s._v("「SourceMapDevToolPlugin」")])])]),s._v(" "),a("h4",{attrs:{id:"质量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#质量"}},[s._v("#")]),s._v(" 质量")]),s._v(" "),a("p",[s._v("①source-map = eval-source-map\n②cheap-module-\n③cheap-\n④eval = none\n⑤nosource-")]),s._v(" "),a("h3",{attrs:{id:"source-map-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#source-map-的作用"}},[s._v("#")]),s._v(" Source Map 的作用")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("「定位源代码」")]),s._v("：在浏览器开发者工具中，可以定位到源代码，而不是转换后的代码，方便调试。")]),s._v(" "),a("li",[a("strong",[s._v("「代码压缩」")]),s._v("：在代码压缩的过程中，可以保留源代码的结构，方便调试。")])]),s._v(" "),a("h2",{attrs:{id:"webpack-打包过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-打包过程"}},[s._v("#")]),s._v(" Webpack   打包过程")]),s._v(" "),a("blockquote",[a("p",[s._v("本质上，webpack 是一个现代 JavaScript 应用程序的「静态」模块打包器（module bundler），当 webpack 处理应用程序时，它会「递归」地构建一个依赖关系图（dependency graph），其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);