(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{559:function(t,a,s){"use strict";s.r(a);var e=s(1),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("前言：本编笔记是刚毕业入职实习时（2021-03-23）记录的 react 笔记。")]),t._v(" "),a("h2",{attrs:{id:"_2-jsx-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-jsx-简介"}},[t._v("#")]),t._v(" 2.JSX 简介")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" world"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("它被称为 JSX，是一个 JavaScript 的语法扩展。")]),t._v(" "),a("h3",{attrs:{id:"在-jsx-中嵌入表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-jsx-中嵌入表达式"}},[t._v("#")]),t._v(" 在 JSX 中嵌入表达式")]),t._v(" "),a("p",[t._v("在 JSX 语法中，你可以在大括号内放置任何有效的 JavaScript 表达式。")]),t._v(" "),a("h3",{attrs:{id:"jsx-也是一个表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx-也是一个表达式"}},[t._v("#")]),t._v(" JSX 也是一个表达式")]),t._v(" "),a("h3",{attrs:{id:"jsx-特定属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx-特定属性"}},[t._v("#")]),t._v(" JSX 特定属性")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("你可以通过使用引号，来将属性值指定为字符串字面量：")])]),t._v(" "),a("li",[a("p",[t._v("也可以使用大括号，来在属性值中插入一个 JavaScript 表达式：")])])]),t._v(" "),a("p",[t._v("注意："),a("strong",[t._v("因为 JSX 语法上更接近 JavaScript 而不是 HTML，所以 React DOM 使用 camelCase（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定。")])]),t._v(" "),a("h2",{attrs:{id:"_3-元素渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-元素渲染"}},[t._v("#")]),t._v(" 3.元素渲染")]),t._v(" "),a("h3",{attrs:{id:"将一个元素渲染为-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将一个元素渲染为-dom"}},[t._v("#")]),t._v(" 将一个元素渲染为 DOM")]),t._v(" "),a("p",[t._v("假设你的 HTML 文件某处有一个 div：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("我们将其称为“根” DOM 节点，因为该节点内的所有内容都将由 React DOM 管理。")]),t._v(" "),a("p",[t._v("仅使用 React 构建的应用通常只有单一的根 DOM 节点。")]),t._v(" "),a("p",[t._v("想要将一个 React 元素渲染到根 DOM 节点中，只需把它们一起传入 ReactDOM.render()")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("world"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nReactDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"更新已渲染的元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新已渲染的元素"}},[t._v("#")]),t._v(" 更新已渲染的元素")]),t._v(" "),a("p",[t._v("React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。")]),t._v(" "),a("p",[t._v("根据我们已有的知识，更新 UI 唯一的方式是创建一个全新的元素，并将其传入 ReactDOM.render()。")]),t._v(" "),a("h3",{attrs:{id:"react-只更新它需要更新的部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-只更新它需要更新的部分"}},[t._v("#")]),t._v(" React 只更新它需要更新的部分")]),t._v(" "),a("h2",{attrs:{id:"_4-组件-props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-组件-props"}},[t._v("#")]),t._v(" 4.组件 & Props")]),t._v(" "),a("p",[t._v("组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。")]),t._v(" "),a("h3",{attrs:{id:"函数组件与-class-组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数组件与-class-组件"}},[t._v("#")]),t._v(" 函数组件与 class 组件")]),t._v(" "),a("p",[t._v("定义组件最简单的方式就是编写 JavaScript 函数：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Welcome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("还可以使用 ES6 的 class 来定义组件：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Welcome")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"渲染组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染组件"}},[t._v("#")]),t._v(" 渲染组件")]),t._v(" "),a("p",[t._v("当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”。")]),t._v(" "),a("p",[t._v("例如，这段代码会在页面上渲染 “Hello, Sara”：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Welcome")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Welcome name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sara"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nReactDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("strong",[t._v("注意： 组件名称必须以大写字母开头。")])]),t._v(" "),a("h3",{attrs:{id:"组合组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合组件"}},[t._v("#")]),t._v(" 组合组件")]),t._v(" "),a("p",[t._v("组件可以在其输出中引用其他组件")]),t._v(" "),a("p",[t._v("通常来说，每个新的 React 应用程序的顶层组件都是 App 组件。")]),t._v(" "),a("p",[t._v("但是，如果你将 React 集成到现有的应用程序中，你可能需要使用像 Button 这样的小组件，并"),a("strong",[t._v("自下而上")]),t._v("地将这类组件逐步应用到视图层的每一处。")]),t._v(" "),a("h3",{attrs:{id:"提取组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提取组件"}},[t._v("#")]),t._v(" 提取组件")]),t._v(" "),a("p",[t._v("将组件拆分为更小的组件")]),t._v(" "),a("p",[t._v("如果 UI 中有一部分被多次使用（Button，Panel，Avatar），或者组件本身就足够复杂（App，FeedStory，Comment），那么它就是一个可复用组件的候选项。")]),t._v(" "),a("h3",{attrs:{id:"props-的只读性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props-的只读性"}},[t._v("#")]),t._v(" Props 的只读性")]),t._v(" "),a("p",[t._v("任何组件都不能修改自身的 props。")]),t._v(" "),a("ul",[a("li",[t._v("纯函数：不会更改传入参数的函数")])]),t._v(" "),a("p",[a("strong",[t._v("所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。")])]),t._v(" "),a("h2",{attrs:{id:"_5-state-生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-state-生命周期"}},[t._v("#")]),t._v(" 5.State & 生命周期")]),t._v(" "),a("p",[t._v("State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件。")]),t._v(" "),a("p",[t._v("Class 组件应该始终使用 props 参数来调用父类的构造函数。")]),t._v(" "),a("h3",{attrs:{id:"将生命周期方法添加到-class-中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将生命周期方法添加到-class-中"}},[t._v("#")]),t._v(" 将生命周期方法添加到 Class 中")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/16775500-8d325f8093591c76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/740/format/webp",alt:""}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("挂载：当组件第一次被渲染到 DOM 的时候")])]),t._v(" "),a("li",[a("p",[t._v("卸载：当组件被删除时")])])]),t._v(" "),a("p",[t._v("广义分三个阶段：挂载、渲染、卸载")]),t._v(" "),a("p",[t._v("可以看成两个阶段：")]),t._v(" "),a("p",[a("strong",[t._v("一、挂载卸载过程")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("constructor():完成数据初始化")])]),t._v(" "),a("li",[a("p",[t._v("componentWillMount():在 constructor 后，但是未渲染 DOM")])]),t._v(" "),a("li",[a("p",[t._v("componentDidMount():组件第一次渲染完成，dom 节点生成，Ajax 请求")])]),t._v(" "),a("li",[a("p",[t._v("componentWillUnmount():")])])]),t._v(" "),a("p",[a("strong",[t._v("二、更新过程")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("componentWillReceiveProps()")])]),t._v(" "),a("li",[a("p",[t._v("shouldComponentUpdate(nextProps,nextState)")])]),t._v(" "),a("li",[a("p",[t._v("componentWillUpdate (nextProps,nextState)")])]),t._v(" "),a("li",[a("p",[t._v("componentDidUpdate(prevProps,prevState)")])])]),t._v(" "),a("p",[t._v("第一个钩子函数 componentDidMount，这个钩子函数在组件一开始就会调用。\n第二个钩子函数 componentDidUpdate，这个钩子函数在数据发生改变时就会触发。")]),t._v(" "),a("h3",{attrs:{id:"正确地使用-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确地使用-state"}},[t._v("#")]),t._v(" 正确地使用 State")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("不要直接修改 State，而是应该使用 setState()，构造函数是唯一可以给 this.state 赋值的地方：")])]),t._v(" "),a("li",[a("p",[t._v("State 的更新可能是异步的")])]),t._v(" "),a("li",[a("p",[t._v("State 的更新会被合并：当你调用 setState() 的时候，React 会把你提供的对象合并到当前的 state。 **")])]),t._v(" "),a("li",[a("p",[t._v("数据是向下流动的")])])]),t._v(" "),a("h2",{attrs:{id:"_6-事件处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-事件处理"}},[t._v("#")]),t._v(" 6.事件处理")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("React 事件的命名采用小驼峰式（camelCase），而不是纯小写。")])]),t._v(" "),a("li",[a("p",[t._v("使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。")])])]),t._v(" "),a("p",[t._v("当你使用 ES6 class 语法定义一个组件的时候，通常的做法是将事件处理函数声明为 class 中的方法。")]),t._v(" "),a("p",[a("strong",[t._v("绑定 this：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("this.handleClick = this.handleClick.bind(this); 在构造函数中绑定")])]),t._v(" "),a("li",[a("p",[t._v("class fields 语法")])])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此语法确保 `handleClick` 内的 `this` 已被绑定。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意: 这是 *实验性* 语法。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("handleClick")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this is:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("在回调中使用箭头函数")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onClick"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"向事件处理程序传递参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向事件处理程序传递参数"}},[t._v("#")]),t._v(" 向事件处理程序传递参数")]),t._v(" "),a("p",[t._v("在循环中，通常我们会为事件处理函数传递额外的参数。例如，若 id 是你要删除那一行的 ID，以下两种方式都可以向事件处理函数传递参数：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onClick"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Delete Row"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onClick"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Delete Row"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("上述两种方式是等价的，分别通过箭头函数和 Function.prototype.bind 来实现。")]),t._v(" "),a("h2",{attrs:{id:"_7-条件渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-条件渲染"}},[t._v("#")]),t._v(" 7.条件渲染")]),t._v(" "),a("p",[t._v("React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 if 或者条件运算符去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。")]),t._v(" "),a("h3",{attrs:{id:"元素变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素变量"}},[t._v("#")]),t._v(" 元素变量")]),t._v(" "),a("p",[t._v("使用变量来储存元素，它可以帮助你有条件地渲染组件的一部分，而其他的渲染部分并不会因此而改变。")]),t._v(" "),a("h3",{attrs:{id:"在-jsx-中内联条件渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-jsx-中内联条件渲染"}},[t._v("#")]),t._v(" 在 JSX 中内联条件渲染")]),t._v(" "),a("ol",[a("li",[t._v("与运算符 &&")])]),t._v(" "),a("p",[t._v("在 JavaScript 中，true && expression 总是会返回 expression, 而 false && expression 总是会返回 false。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("三目运算符")])]),t._v(" "),a("p",[t._v("condition ? true : false。")]),t._v(" "),a("h3",{attrs:{id:"阻止组件渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻止组件渲染"}},[t._v("#")]),t._v(" 阻止组件渲染")]),t._v(" "),a("p",[t._v("在极少数情况下，你可能希望能隐藏组件，即使它已经被其他组件渲染。若要完成此操作，你可以让 render 方法直接返回 null，而不进行任何渲染。")]),t._v(" "),a("h2",{attrs:{id:"_8-列表-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-列表-key"}},[t._v("#")]),t._v(" 8.列表 & key")]),t._v(" "),a("h3",{attrs:{id:"渲染多个组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染多个组件"}},[t._v("#")]),t._v(" 渲染多个组件")]),t._v(" "),a("p",[t._v("可以通过使用 {} 在 JSX 内构建一个元素集合。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("cont numbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" listItems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("li"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("li"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nReactDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ul"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("listItems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ul"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h3",{attrs:{id:"基础列表组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础列表组件"}},[t._v("#")]),t._v(" 基础列表组件")]),t._v(" "),a("p",[t._v("通常需要在一个组件中渲染列表。")]),t._v(" "),a("h3",{attrs:{id:"key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key"}},[t._v("#")]),t._v(" Key")]),t._v(" "),a("p",[t._v("key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识；")]),t._v(" "),a("p",[t._v("一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用数据中的 id 来作为元素的 key；")]),t._v(" "),a("p",[t._v("当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key。")]),t._v(" "),a("h3",{attrs:{id:"用-key-提取组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-key-提取组件"}},[t._v("#")]),t._v(" 用 key 提取组件")]),t._v(" "),a("p",[t._v("元素的 key 只有放在就近的数组上下文中才有意义。")]),t._v(" "),a("p",[t._v("一个好的经验法则是：在 map() 方法中的元素需要设置 key 属性。")]),t._v(" "),a("h3",{attrs:{id:"key-只是在兄弟节点之间必须唯一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-只是在兄弟节点之间必须唯一"}},[t._v("#")]),t._v(" key 只是在兄弟节点之间必须唯一")]),t._v(" "),a("p",[t._v("数组元素中使用的 key 在其兄弟节点之间应该是独一无二的。然而，它们不需要是全局唯一的。当我们生成两个不同的数组时，我们可以使用相同的 key 值。")]),t._v(" "),a("h2",{attrs:{id:"_9-表单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-表单"}},[t._v("#")]),t._v(" 9.表单")]),t._v(" "),a("p",[t._v("在 React 里，HTML 表单元素的工作方式和其他的 DOM 元素有些不同，这是因为表单元素通常会保持一些内部的 state。")]),t._v(" "),a("h3",{attrs:{id:"受控组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#受控组件"}},[t._v("#")]),t._v(" 受控组件")]),t._v(" "),a("p",[t._v("在 HTML 中，表单元素（如 input、 textarea 和 select）通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 setState()来更新。")]),t._v(" "),a("p",[t._v("我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。")]),t._v(" "),a("p",[t._v("对于受控组件来说，输入的值始终由 React 的 state 驱动。")]),t._v(" "),a("h4",{attrs:{id:"textarea-标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#textarea-标签"}},[t._v("#")]),t._v(" textarea 标签")]),t._v(" "),a("p",[t._v("在 HTML 中, textarea 元素通过其子元素定义其文本。而在 React 中，textarea 使用 value 属性代替。这样，可以使得使用 textarea 的表单和使用单行 input 的表单非常类似。")]),t._v(" "),a("h4",{attrs:{id:"select-标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-标签"}},[t._v("#")]),t._v(" select 标签")]),t._v(" "),a("p",[t._v("React 并不会使用 selected 属性，而是在根 select 标签上使用 value 属性。")]),t._v(" "),a("h4",{attrs:{id:"文件-input-标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件-input-标签"}},[t._v("#")]),t._v(" 文件 input 标签")]),t._v(" "),a("p",[t._v("因为它的 value 只读，所以它是 React 中的一个"),a("strong",[t._v("非受控组件")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"处理多个输入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理多个输入"}},[t._v("#")]),t._v(" 处理多个输入")]),t._v(" "),a("p",[t._v("当需要处理多个 input 元素时，我们可以给每个元素添加 name 属性，并让处理函数根据 event.target.name 的值选择要执行的操作。")]),t._v(" "),a("h3",{attrs:{id:"受控输入空值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#受控输入空值"}},[t._v("#")]),t._v(" 受控输入空值")]),t._v(" "),a("p",[t._v("在受控组件上指定 value 的 prop 会阻止用户更改输入。")]),t._v(" "),a("h2",{attrs:{id:"_10-状态提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-状态提升"}},[t._v("#")]),t._v(" 10.状态提升")]),t._v(" "),a("p",[t._v("通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。")]),t._v(" "),a("p",[t._v("在 React 中，将多个组件中需要共享的 state 向上移动到它们的最近共同父组件中，便可实现共享 state。这就是所谓的“状态提升”")]),t._v(" "),a("h2",{attrs:{id:"_11-组合-vs-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-组合-vs-继承"}},[t._v("#")]),t._v(" 11.组合 vs 继承")]),t._v(" "),a("p",[t._v("React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。无需使用继承。")]),t._v(" "),a("h3",{attrs:{id:"包含关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包含关系"}},[t._v("#")]),t._v(" 包含关系")]),t._v(" "),a("p",[t._v("有些组件无法提前知晓它们子组件的具体内容，建议这些组件使用一个特殊的 children prop 来将他们的子组件传递到渲染结果中。")]),t._v(" "),a("p",[t._v("这使得别的组件可以通过 JSX 嵌套，将任意组件作为子组件传递给它们。")]),t._v(" "),a("h3",{attrs:{id:"特例关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特例关系"}},[t._v("#")]),t._v(" 特例关系")]),t._v(" "),a("h2",{attrs:{id:"_12-react-哲学"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-react-哲学"}},[t._v("#")]),t._v(" 12.React 哲学")]),t._v(" "),a("h3",{attrs:{id:"第一步-将设计好的-ui-划分为组件层级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一步-将设计好的-ui-划分为组件层级"}},[t._v("#")]),t._v(" 第一步：将设计好的 UI 划分为组件层级")]),t._v(" "),a("ul",[a("li",[t._v("单一功能原则")])]),t._v(" "),a("h3",{attrs:{id:"第二步-用-react-创建一个静态版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二步-用-react-创建一个静态版本"}},[t._v("#")]),t._v(" 第二步：用 React 创建一个静态版本")]),t._v(" "),a("p",[t._v("最容易的方式，是先用已有的数据模型渲染一个不包含交互功能的 UI。")]),t._v(" "),a("p",[t._v("最好将渲染 UI 和添加交互这两个过程分开。")]),t._v(" "),a("p",[t._v("在构建应用的静态版本时，我们需要创建一些会重用其他组件的组件，然后通过 props 传入所需的数据。")]),t._v(" "),a("p",[a("strong",[t._v("props 是父组件向子组件传递数据的方式")]),t._v("。")]),t._v(" "),a("p",[t._v("即使你已经熟悉了 state 的概念，也完全不应该使用 state 构建静态版本。")]),t._v(" "),a("p",[t._v("state 代表了随时间会产生变化的数据，应当仅在实现交互时使用。所以构建应用的静态版本时，你不会用到它。")]),t._v(" "),a("p",[t._v("可以"),a("strong",[t._v("自上而下")]),t._v("或者"),a("strong",[t._v("自下而上")]),t._v("构建应用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("自上而下：首先编写层级较高的组件（应用比较简单时）")])]),t._v(" "),a("li",[a("p",[t._v("自下而上：从最基本的组件开始编写（较为大型的项目）")])])]),t._v(" "),a("p",[t._v("React 单向数据流（也叫单向绑定）的思想使得组件模块化，易于快速开发。")]),t._v(" "),a("h3",{attrs:{id:"第三步-确定-ui-state-的最小-且完整-表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三步-确定-ui-state-的最小-且完整-表示"}},[t._v("#")]),t._v(" 第三步：确定 UI state 的最小（且完整）表示")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。")])]),t._v(" "),a("li",[a("p",[t._v("该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。")])]),t._v(" "),a("li",[a("p",[t._v("你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。")])])]),t._v(" "),a("h3",{attrs:{id:"第四步-确定-state-放置的位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四步-确定-state-放置的位置"}},[t._v("#")]),t._v(" 第四步：确定 state 放置的位置")]),t._v(" "),a("p",[t._v("对于应用中的每一个 state：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("找到根据这个 state 进行渲染的所有组件。")])]),t._v(" "),a("li",[a("p",[t._v("找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。")])]),t._v(" "),a("li",[a("p",[t._v("该共同所有者组件或者比它层级更高的组件应该拥有该 state。")])]),t._v(" "),a("li",[a("p",[t._v("如果你找不到一个合适的位置来存放该 state，就可以直接创建一个新的组件来存放该 state，并将这一新组件置于高于共同所有者组件层级的位置。")])])]),t._v(" "),a("h3",{attrs:{id:"第五步-添加反向数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五步-添加反向数据流"}},[t._v("#")]),t._v(" 第五步：添加反向数据流")]),t._v(" "),a("p",[t._v("由于 state 只能由拥有它们的组件进行更改，FilterableProductTable 必须将一个能够触发 state 改变的回调函数（callback）传递给 SearchBar。")]),t._v(" "),a("p",[t._v("我们可以使用输入框的 onChange 事件来监视用户输入的变化，并通知 FilterableProductTable 传递给 SearchBar 的回调函数。然后该回调函数将调用 setState()，从而更新应用。")])])}),[],!1,null,null,null);a.default=r.exports}}]);